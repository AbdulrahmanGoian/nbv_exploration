<?xml version="1.0" ?>
<launch>
    <arg name="using_debug_box" default="true"/>
    <arg name="using_full_sized_scenario" default="false"/>

    
    <arg name="enable_rtab" default="false"/>
    <arg name="start_gazebo" default="false"/>
    
    <arg name="ns" default="iris"/>
    <arg name="rtab_ns" default="rtabmap"/>
    <arg name="mav_name" default="iris"/>
    
    <arg name="scan_topic" default="/nbv_exploration/scan"/>
    <arg name="depth_topic" default="/nbv_exploration/depth"/>
    
    <env name="GAZEBO_MODEL_PATH" value="$(find rotors_gazebo)/models"/>
    
    
    <!-- Start Gazebo and set up the world -->
    <include if="$(arg start_gazebo)" file="$(find gazebo_ros)/launch/empty_world.launch">
	<arg name="world_name" value="$(find rotors_gazebo)/worlds/etihad_aircraft_world.world" if="$(arg using_full_sized_scenario)" /> <!-- full sized -->
	<arg name="world_name" value="$(find rotors_gazebo)/worlds/etihad_aircraft_world_half.world" unless="$(arg using_full_sized_scenario)" /> <!-- half sized -->
	<arg name="debug" value="false" />
	<arg name="headless" value="false"/>
	<arg name="gui" value="true"/>
    </include>
    
    <!-- Spawn UAV -->
    <group ns="$(arg mav_name)">
	<!-- If we're using the debug box -->
	<include file="$(find rotors_gazebo)/launch/spawn_iris.launch" if="$(arg using_debug_box)">
	    <arg name="model" value="$(find rotors_description)/urdf/$(arg mav_name)_nbv_exploration.gazebo" />
	    <arg name="enable_logging" value="false" />
	    <arg name="enable_ground_truth" value="true" />
	    <arg name="log_file" value="$(arg ns)"/>
	    
	    <!-- Half sized scenario spawn point -->
	    <arg name="Y" value="0"/><!-- Yaw -->
	    <arg name="y" value="-6"/>
	    <arg name="x" value="-6"/>
	</include>
	
	<!-- If we're using the aircraft -->
	<include file="$(find rotors_gazebo)/launch/spawn_iris.launch" unless="$(arg using_debug_box)">
	    <arg name="model" value="$(find rotors_description)/urdf/$(arg mav_name)_nbv_exploration.gazebo" />
	    <arg name="enable_logging" value="false" />
	    <arg name="enable_ground_truth" value="true" />
	    <arg name="log_file" value="$(arg ns)"/>
	    
	    <!-- Full sized scenario spawn point -->
	    <arg name="Y" value="3.14" if="$(arg using_full_sized_scenario)" /><!-- Yaw -->
	    <arg name="y" value="-30" if="$(arg using_full_sized_scenario)" />
	    <arg name="x" value="6" if="$(arg using_full_sized_scenario)" />
	    
	    <!-- Half sized scenario spawn point -->
	    <arg name="Y" value="3.14" unless="$(arg using_full_sized_scenario)" /><!-- Yaw -->
	    <arg name="y" value="-12" unless="$(arg using_full_sized_scenario)" />
	    <arg name="x" value="4" unless="$(arg using_full_sized_scenario)" />
	</include>
    </group>
    
    
    <!-- Set up autopilot (?) -->
    <include file="$(find px4)/launch/iris.launch">
	<arg name="ns" value="$(arg ns)"/>
    </include>

    <include file="$(find px4)/launch/mavros_sitl.launch">
	<arg name="ns" value="$(arg ns)"/>
    </include>
    
    <group ns="$(arg ns)">
	<param name="MPP_XY_VEL_MAX" type="double" value="20.0" />
	<param name="MPP_TILTMAX_AIR" type="double" value="10" />
	<param name="MPP_TILTMAX_LND" type="double" value="0.3" />
	
	<!-- See more at:
	https://webcache.googleusercontent.com/search?q=cache:ggjDnnSZyqIJ:https://pixhawk.ethz.ch/docs/multiplatform_2mc__pos__control__params_8c.html+&cd=1&hl=en&ct=clnk&gl=ae&client=ubuntu
	-->
    </group>


    <!-- Publish static transporms -->
    <node pkg="tf" type="static_transform_publisher" name="nbv_launch_link1_broadcaster"  args="0.05 0.022 -0.055    -0.5 0.5     -0.5 0.5     /iris/xtion_sensor/ground_truth/iris/xtion_sensor/ground_truth/odometry_sensor_link /iris/xtion_sensor/camera_depth_optical_frame 500" />
    <node pkg="tf" type="static_transform_publisher" name="nbv_launch_link1_broadcaster2" args="0.10 0.0    0.10      0   0.05234  0   0.99863 /iris/xtion_sensor/ground_truth/iris/xtion_sensor/ground_truth/odometry_sensor_link /iris/hokuyo_laser_link 500" />
    
    <!-- Start RVIZ -->
    <node pkg="rviz" name="rviz" type="rviz" args="-d $(find nbv_exploration)/rviz/nbv_rtabmap.rviz" required="true" />
    
    
    <!-- Set up RTAB -->
    <group ns="$(arg rtab_ns)" if="$(arg enable_rtab)">
      <node pkg="rtabmap_ros" name="rtabmap" type="rtabmap" output="screen" args="--delete_db_on_start">
	<param name="frame_id" type="string" value="/iris/xtion_sensor/ground_truth/iris/xtion_sensor/ground_truth/odometry_sensor_link"/>
	<param name="map_frame_id" type="string" value="map"/>
	<param name="subscribe_depth"     type="bool" value="true"/>
	<param name="subscribe_odom_info" type="bool" value="true"/>
	<param name="subscribe_laserScan" type="bool" value="true"/>
	<param name="wait_for_transform" type="bool" value="true"/>

	<remap from="odom"            to="/iris/ground_truth/odometry"/>
	<remap from="depth/image"     to="/iris/xtion_sensor/iris/xtion_sensor_camera/depth/image_raw"/>
	<remap from="rgb/image"       to="/iris/xtion_sensor/iris/xtion_sensor_camera/rgb/image_raw"/>
	<remap from="rgb/camera_info" to="/iris/xtion_sensor/iris/xtion_sensor_camera/rgb/camera_info"/>
	<remap from="scan"            to="$(arg scan_topic)"/>

	<param name="queue_size" type="int" value="10"/>

	<!-- RTAB-Map's parameters: do "rosrun rtabmap_ros rtabmap (double-dash)params" to see the list of available parameters. -->
	<param name="RGBD/NeighborLinkRefining" type="string" value="false"/>  <!-- Do odometry correction with consecutive laser scans -->
	<param name="RGBD/ProximityBySpace"     type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
	<param name="RGBD/ProximityByTime"      type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
	<param name="RGBD/OptimizeFromGraphEnd" type="string" value="true"/>
	<param name="Reg/Strategy"              type="string" value="1"/>     <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
	<param name="Vis/InlierDistance"        type="string" value="0.01"/>   <!-- 3D visual words correspondence distance -->
	<param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/> <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
	<param name="Optimizer/Slam2D"          type="string" value="false"/>
	<param name="Reg/Force3DoF"             type="string" value="false"/>
	<param name="Rtabmap/DetectionRate"     type="string" value="10"/>    <!-- Frequency of updates -->
	
	<param name="Icp/MaxCorrespondenceDistance" type="string" value="0.05"/> <!-- Max distance for point correspondences. (Default: 0.05) -->
	<param name="Icp/MaxRotation"               type="string" value="0.78"/> <!-- Maximum ICP rotation correction accepted (Default 0.78 rad) -->
	<param name="Icp/MaxTranslation"            type="string" value="0.20"/> <!-- Maximum ICP translation correction accepted (Default 0.2 m) -->
      </node>
    
      <!-- Visualisation RTAB-Map -->
      <!--
      <node pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz"  output="screen">
	  <param name="subscribe_depth"     type="bool"   value="true"/>
	  <param name="subscribe_laserScan" type="bool"   value="true"/>
	  <param name="subscribe_odom_info" type="bool"   value="true"/>
	  <param name="frame_id"            type="string" value="world"/>

	  <remap from="odom" to="/iris/xtion_sensor/ground_truth/odometry"/>
	  <remap from="depth/image" to="/iris/xtion_sensor/iris/xtion_sensor_camera/depth/image_raw"/>
	  <remap from="rgb/image" to="/iris/xtion_sensor/iris/xtion_sensor_camera/rgb/image_raw"/>
	  <remap from="rgb/camera_info" to="/iris/xtion_sensor/iris/xtion_sensor_camera/rgb/camera_info"/>
      </node>
      -->
    </group>
    
    
    <!-- Run nodes -->    
    <!-- correct the laser scan points near the max and min range -->
    <node pkg="nbv_exploration" name="correct_laser_scan_and_depth" type="correct_laser_scan_and_depth" ns="nbv_exploration_ns" args="" required="true" output="screen">
      <rosparam file="$(find nbv_exploration)/config/sensor_settings.yaml" command="load" />
      
      <remap from="scan_in"  to="/iris/scan"/>
      <remap from="scan_out" to="$(arg scan_topic)"/>
      <remap from="depth_in"  to="/iris/xtion_sensor/iris/xtion_sensor_camera/depth/points"/>
      <remap from="depth_out" to="$(arg depth_topic)"/>
    </node>
    
    
    <!-- profiler and mapper -->
    <node pkg="nbv_exploration" name="sensing_and_mapping" type="sensing_and_mapping" args="" required="true" output="screen">
      <rosparam file="$(find nbv_exploration)/config/sensor_settings.yaml" command="load" />
   
      <remap from="scan_in"  to="$(arg scan_topic)"/>
    </node>
    
    <!--
    <node pkg="nbv_exploration" name="sensing_and_mapping" type="sensing_and_mapping" args="" required="true" output="screen" >
      <remap from="scan_in"  to="$(arg scan_topic)"/>
    </node>
    -->
</launch>
